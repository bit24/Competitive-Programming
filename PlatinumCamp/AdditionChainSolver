import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class AdditionChainSolver {
	static int target;
	static int best;

	static int numExplored = 0;

	static int[] chain = new int[30];
	static int chainSize = 1;

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		target = Integer.parseInt(reader.readLine());

		best = Integer.MAX_VALUE;

		int currentDepth = 1;
		
		chain[0] = 1;
		while (best == Integer.MAX_VALUE) {
			// System.out.println("run");
			dfs(currentDepth);
			currentDepth += 1;
		}

		System.out.println(best);
	}

	public static boolean dfs(int depth) {
		// System.out.println(chain);

		if (chain[chainSize - 1] == target) {
			if (chainSize < best) {
				best = chainSize;
				return true;
			}
			return false;
		}

		if (depth == 0) {
			return false;
		}

		if (chain[chainSize - 1] > target) {
			return false;
		}

		if ((chain[chainSize - 1] << depth) < target) {
			return false;
		}

		for (int i = chainSize-1; i >= 0; i--) {
			chain[chainSize++] = chain[i] + chain[chainSize - 2];
			if (dfs(depth - 1)) {
				chainSize--;
				return true;
			}
			chainSize--;
		}
		return false;
	}

}
