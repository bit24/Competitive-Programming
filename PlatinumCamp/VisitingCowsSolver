import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class VisitingCowsSolver {

	static int numVertices;
	static ArrayList<ArrayList<Integer>> aList = new ArrayList<ArrayList<Integer>>();
	static ArrayList<ArrayList<Integer>> children = new ArrayList<ArrayList<Integer>>();

	static int[] dp;

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		numVertices = Integer.parseInt(reader.readLine());

		for (int i = 0; i < numVertices; i++) {
			aList.add(new ArrayList<Integer>());
			children.add(new ArrayList<Integer>());
		}

		for (int i = 1; i < numVertices; i++) {
			StringTokenizer inputData = new StringTokenizer(reader.readLine());
			int a = Integer.parseInt(inputData.nextToken()) - 1;
			int b = Integer.parseInt(inputData.nextToken()) - 1;
			aList.get(a).add(b);
			aList.get(b).add(a);
		}
		computeChildren(0, new boolean[numVertices]);

		dp = new int[numVertices];
		Arrays.fill(dp, -1);

		System.out.println(findMaxDFS(0));

	}

	public static void computeChildren(int index, boolean[] visited) {
		visited[index] = true;
		for (int neighbor : aList.get(index)) {
			if (!visited[neighbor]) {
				children.get(index).add(neighbor);
				computeChildren(neighbor, visited);
			}
		}
	}

	public static int findMaxDFS(int index) {
		if (dp[index] != -1) {
			return dp[index];
		}

		int sum1 = 1;

		for (int child : children.get(index)) {
			for (int childChild : children.get(child)) {
				sum1 += findMaxDFS(childChild);
			}
		}

		int sum2 = 0;

		for (int child : children.get(index)) {
			sum2 += findMaxDFS(child);
		}

		return dp[index] = Math.max(sum1, sum2);
	}

}
