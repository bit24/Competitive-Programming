import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.StringTokenizer;

public class CheapestPalindromeSolver {

	static int numElements;
	static int alphabetSize;

	static char[] elements;
	static int[][] dp;

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer inputData = new StringTokenizer(reader.readLine());
		alphabetSize = Integer.parseInt(inputData.nextToken());
		numElements = Integer.parseInt(inputData.nextToken());
		elements = reader.readLine().toCharArray();
		HashMap<Character, Integer> cost = new HashMap<Character, Integer>();

		for (int i = 0; i < alphabetSize; i++) {
			inputData = new StringTokenizer(reader.readLine());
			cost.put(inputData.nextToken().charAt(0),
					Math.min(Integer.parseInt(inputData.nextToken()), Integer.parseInt(inputData.nextToken())));
		}

		dp = new int[numElements][numElements];

		for (int length = 2; length <= numElements; length++) {
			for (int i = 0; i + length - 1 < numElements; i++) {
				int j = i + length - 1;
				dp[i][j] = Integer.MAX_VALUE;
				if (elements[i] == elements[j]) {
					dp[i][j] = dp[i + 1][j - 1];
				}
				dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + cost.get(elements[i]));
				dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + cost.get(elements[j]));
			}
		}
		System.out.println(dp[0][numElements - 1]);

	}

}
