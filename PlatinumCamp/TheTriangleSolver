import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class TheTriangleSolver {

	static int totalSideLength;
	static int minSideLength;
	static int maxSideLength;

	static long[][] triangle;
	static long[][] prefixSums;

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer inputData = new StringTokenizer(reader.readLine());
		totalSideLength = Integer.parseInt(inputData.nextToken());
		minSideLength = Integer.parseInt(inputData.nextToken());
		maxSideLength = Math.min(minSideLength * 2, totalSideLength);

		triangle = new long[totalSideLength][];
		prefixSums = new long[totalSideLength][];

		for (int i = 0; i < totalSideLength; i++) {
			inputData = new StringTokenizer(reader.readLine());
			triangle[i] = new long[i + 1];
			prefixSums[i] = new long[i + 1];
			for (int j = 0; j <= i; j++) {
				triangle[i][j] = Integer.parseInt(inputData.nextToken());
				prefixSums[i][j] = j != 0 ? prefixSums[i][j - 1] + triangle[i][j] : triangle[i][j];
			}
		}

		long answer = Long.MIN_VALUE;
		for (int currentSideLength = minSideLength; currentSideLength <= maxSideLength; currentSideLength++) {
			for (int pivotRow = 0; pivotRow + currentSideLength - 1 < totalSideLength; pivotRow++) {
				for (int pivotColumn = 0; pivotColumn < triangle[pivotRow].length; pivotColumn++) {
					long triangleSum = 0;
					for (int rowNumber = 0; rowNumber < currentSideLength; rowNumber++) {

						triangleSum += prefixSums[pivotRow + rowNumber][pivotColumn + rowNumber]
								- (pivotColumn != 0 ? prefixSums[pivotRow + rowNumber][pivotColumn - 1] : 0);
					}
					long triangleArea = ((currentSideLength + 1) * currentSideLength) / 2;
					answer = Math.max(answer, triangleSum / triangleArea);
				}
			}
		}

		for (int currentSideLength = minSideLength; currentSideLength <= maxSideLength; currentSideLength++) {
			for (int pivotRow = 0; pivotRow + currentSideLength - 1 < totalSideLength; pivotRow++) {
				for (int pivotColumn = 0; pivotColumn + currentSideLength
						- 1 < triangle[pivotRow].length; pivotColumn++) {
					long triangleSum = 0;
					for (int rowNumber = 0; rowNumber < currentSideLength; rowNumber++) {

						triangleSum += prefixSums[pivotRow + rowNumber][pivotColumn + currentSideLength - 1]
								- (pivotColumn + rowNumber
										!= 0 ? prefixSums[pivotRow + rowNumber][pivotColumn + rowNumber - 1] : 0);
					}
					long triangleArea = ((currentSideLength + 1) * currentSideLength) / 2;
					answer = Math.max(answer, triangleSum / triangleArea);
				}
			}
		}
		System.out.println(answer);
	}
}
