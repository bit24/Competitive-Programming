import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class LightSwitchingSolver {

	public static void main(String[] args) throws IOException {
		new LightSwitchingSolver().execute();
	}

	public void execute() throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer inputData = new StringTokenizer(reader.readLine());
		int dataSize = Integer.parseInt(inputData.nextToken());
		int numRequests = Integer.parseInt(inputData.nextToken());

		LazyPropagationSegmentTree tree = new LazyPropagationSegmentTree(new int[dataSize]);

		ArrayList<Integer> output = new ArrayList<Integer>();
		for (int i = 0; i < numRequests; i++) {
			inputData = new StringTokenizer(reader.readLine());
			if (inputData.nextToken().equals("0")) {
				tree.toggleRange(Integer.parseInt(inputData.nextToken()) - 1, Integer.parseInt(inputData.nextToken()));
			} else {
				output.add(tree.query(Integer.parseInt(inputData.nextToken()) - 1,
						Integer.parseInt(inputData.nextToken())));
			}
		}

		for (int i : output) {
			System.out.println(i);
		}

	}

	public class LazyPropagationSegmentTree {

		int size;
		int[] count;
		boolean[] toUpdate;
		int[] numElements;

		int height;

		public void updateVertex(int vertex) {
			// has children
			if (vertex < size) {
				count[vertex] = numElements[vertex] - count[vertex];
				toUpdate[vertex] = !toUpdate[vertex];
			} else {
				count[vertex] = count[vertex] ^ 1;
			}
		}

		public void pushUpdates(int vertex) {
			for (int currentHeight = height; currentHeight > 0; currentHeight--) {
				int index = vertex >> currentHeight;
				if (toUpdate[index]) {
					updateVertex(index << 1);
					updateVertex(index << 1 | 1);
					toUpdate[index] = false;
				}
			}
		}

		public void updateCount(int vertex) {
			vertex >>= 1;
			while (vertex > 0) {
				count[vertex] = count[vertex << 1] + count[vertex << 1 | 1];

				if (toUpdate[vertex]) {
					count[vertex] = numElements[vertex] - count[vertex];
				}

				vertex >>= 1;
			}
		}

		public void toggleRange(int left, int right) {
			left += size;
			right += size;

			for (int currentLeft = left, currentRight = right; currentLeft < currentRight; currentLeft >>= 1, currentRight >>= 1) {
				if ((currentLeft & 1) != 0) {
					updateVertex(currentLeft++);
				}
				if ((currentRight & 1) != 0) {
					updateVertex(--currentRight);
				}
			}

			pushUpdates(left);
			pushUpdates(right - 1);
			updateCount(left);
			updateCount(right - 1);
		}

		// left inclusive, right exclusive
		public int query(int left, int right) {
			left += size;
			right += size;
			pushUpdates(left);
			pushUpdates(right - 1);
			updateCount(left);
			updateCount(right - 1);

			int ans = 0;
			for (; left < right; left >>= 1, right >>= 1) {
				if ((left & 1) != 0) {
					ans += count[left++];
				}
				// because right exclusive
				if ((right & 1) != 0) {
					ans += count[--right];
				}
			}
			return ans;
		}

		LazyPropagationSegmentTree(int[] input) {

			if (input.length > Integer.highestOneBit(input.length)) {
				size = Integer.highestOneBit(input.length) << 1;
			} else {
				size = Integer.highestOneBit(input.length);
			}

			for (int i = size; i != 0; i >>= 1, height++) {
			}

			count = new int[size * 2];
			toUpdate = new boolean[size];

			for (int i = 0; i < input.length; i++) {
				count[i + size] = input[i];
			}
			for (int i = size - 1; i > 0; i--) {
				count[i] = count[i << 1] + count[i << 1 | 1];
			}

			numElements = new int[size * 2];
			for (int i = 0; i < size; i++) {
				numElements[i + size] = 1;
			}
			for (int i = size - 1; i > 0; i--) {
				numElements[i] = numElements[i << 1] + numElements[i << 1 | 1];
			}
		}
	}
}
