import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class PalindromicPathsSolver {

	static int length;
	static char[][] elements;
	static final int modulo = 1000000007;

	public static void main(String[] args) throws IOException {
		new PalindromicPathsSolver().execute();
	}

	public void execute() throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		length = Integer.parseInt(reader.readLine());

		elements = new char[length * 2 - 1][length];

		for (int currentRow = 0; currentRow < length; currentRow++) {
			String inputLine = reader.readLine();
			for (int currentColumn = 0; currentColumn < length; currentColumn++) {
				int currentDiagonal = currentRow + currentColumn;

				if (currentDiagonal < length) {
					elements[currentDiagonal][currentColumn] = inputLine.charAt(currentColumn);
				} else {
					elements[currentDiagonal][(length - 1) - currentRow] = inputLine.charAt(currentColumn);
				}
			}
		}

		int[][] currentStates = new int[length][length];

		for (int i = 0; i < length; i++) {
			currentStates[i][i] = 1;
		}

		for (int diagonalSize = length; diagonalSize >= 2; diagonalSize--) {
			int[][] nextStates = new int[length][length];
			int newLeftDiagonal = diagonalSize - 2;
			int newRightDiagonal = (length - 1) + (length - diagonalSize) + 1;

			for (int leftPosition = 0; leftPosition < diagonalSize; leftPosition++) {
				for (int rightPosition = 0; rightPosition < diagonalSize; rightPosition++) {
					int numWaysCurrentState = (currentStates[leftPosition][rightPosition] %= modulo);
					if (numWaysCurrentState == 0) {
						continue;
					}

					if (leftPosition - 1 >= 0) {
						if (rightPosition - 1 >= 0 && elements[newLeftDiagonal][leftPosition
								- 1] == elements[newRightDiagonal][rightPosition - 1]) {
							nextStates[leftPosition - 1][rightPosition - 1] += numWaysCurrentState;
							
							if(nextStates[leftPosition - 1][rightPosition - 1] >= modulo){
								nextStates[leftPosition - 1][rightPosition - 1] %= modulo;
							}
						}
						if (rightPosition < diagonalSize - 1 && elements[newLeftDiagonal][leftPosition
								- 1] == elements[newRightDiagonal][rightPosition]) {
							nextStates[leftPosition - 1][rightPosition] += numWaysCurrentState;
							
							if(nextStates[leftPosition - 1][rightPosition] >= modulo){
								nextStates[leftPosition - 1][rightPosition] %= modulo;
							}
						}
					}
					if (leftPosition < diagonalSize - 1) {
						if (rightPosition - 1 >= 0
								&& elements[newLeftDiagonal][leftPosition] == elements[newRightDiagonal][rightPosition
										- 1]) {
							nextStates[leftPosition][rightPosition - 1] += numWaysCurrentState;
							
							if(nextStates[leftPosition][rightPosition - 1] >= modulo){
								nextStates[leftPosition][rightPosition - 1] %= modulo;
							}
						}
						if (rightPosition < diagonalSize - 1
								&& elements[newLeftDiagonal][leftPosition] == elements[newRightDiagonal][rightPosition]) {
							nextStates[leftPosition][rightPosition] += numWaysCurrentState;
							
							if(nextStates[leftPosition][rightPosition] >= modulo){
								nextStates[leftPosition][rightPosition] %= modulo;
							}
						}
					}
				}
			}
			currentStates = nextStates;
		}
		System.out.println(currentStates[0][0] % modulo);
	}
}
