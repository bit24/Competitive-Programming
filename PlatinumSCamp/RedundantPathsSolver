import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class RedundantPathsSolver {

	static int numVertices;

	static int numEdges;

	static ArrayList<Integer>[] neighbors;

	static int[] low;

	static int[] disc;

	static int[] parent;

	static int currentTime = 0;

	static LinkedList<Edge> stack = new LinkedList<Edge>();

	static RedundantPaths b = new RedundantPaths();

	static ArrayList<LinkedHashSet<Integer>> BCCS;

	static int numBCCS = 0;

	static HashSet<Integer> AP = new HashSet<Integer>();

	@SuppressWarnings("unchecked")
	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(
				System.in));
		StringTokenizer inputData = new StringTokenizer(reader.readLine());

		numVertices = Integer.parseInt(inputData.nextToken());
		numEdges = Integer.parseInt(inputData.nextToken());
		neighbors = new ArrayList[numVertices];

		for (int i = 0; i < numVertices; i++) {
			neighbors[i] = new ArrayList<Integer>();
		}

		for (int i = 0; i < numEdges; i++) {
			inputData = new StringTokenizer(reader.readLine());
			int endPointA = Integer.parseInt(inputData.nextToken()) - 1;
			int endPointB = Integer.parseInt(inputData.nextToken()) - 1;

			neighbors[endPointA].add(endPointB);
			neighbors[endPointB].add(endPointA);
		}
		reader.close();

		findBCCS();

		int numLeafs = 0;

		for (LinkedHashSet<Integer> currentBCC : BCCS) {

			int numAPS = 0;

			for (int vertex : currentBCC) {
				if (AP.contains(vertex)) {
					numAPS++;
				}
			}

			if (numAPS < 2) {
				numLeafs++;
			}

		}
		if (numLeafs == 1) {
			System.out.println(0);
		} else if (numLeafs % 2 == 0) {
			System.out.println(numLeafs / 2);
		} else {
			System.out.println(numLeafs / 2 + 1);
		}

	}

	public static void findBCCS() {
		low = new int[numVertices];
		disc = new int[numVertices];
		parent = new int[numVertices];
		BCCS = new ArrayList<LinkedHashSet<Integer>>();

		// mark "not visited"
		Arrays.fill(disc, -1);
		Arrays.fill(low, -1);
		Arrays.fill(parent, -1);

		BCCDFS(0);

		// if stack isn't empty (whole thing is biconnected)
		if (!stack.isEmpty()) {
			BCCS.add(new LinkedHashSet<Integer>());
			while (!stack.isEmpty()) {
				Edge e = stack.pop();
				addToBCC(numBCCS, e.endPointA);
				addToBCC(numBCCS, e.endPointB);

			}

		}

	}

	static void BCCDFS(int currentNode) {
		disc[currentNode] = currentTime;
		low[currentNode] = currentTime++;

		int childrenCount = 0;

		for (int neighbor : neighbors[currentNode]) {

			// neighbor not visited (child)
			if (disc[neighbor] == -1) {
				parent[neighbor] = currentNode;
				childrenCount++;

				Edge currentEdge = b.new Edge(currentNode, neighbor);

				stack.push(currentEdge);

				BCCDFS(neighbor);

				// update low values
				if (low[neighbor] < low[currentNode]) {
					low[currentNode] = low[neighbor];
				}

				// check if this causes there to be an articulation point
				if ((disc[currentNode] != 0 && (low[neighbor] >= disc[currentNode]))
						|| ((disc[currentNode] == 0 && (childrenCount > 1)))) {

					AP.add(currentNode);

					BCCS.add(new LinkedHashSet<Integer>());

					while (!stack.peek().equals(currentEdge)) {
						Edge e = stack.pop();
						addToBCC(numBCCS, e.endPointA);
						addToBCC(numBCCS, e.endPointB);
					}
					Edge e = stack.pop();
					addToBCC(numBCCS, e.endPointA);
					addToBCC(numBCCS, e.endPointB);

					numBCCS++;
				}
			}

			// back edge
			else if (neighbor != parent[currentNode]
					&& disc[neighbor] < disc[currentNode]) {
				stack.push(b.new Edge(currentNode, neighbor));
				if (low[currentNode] > disc[neighbor]) {
					low[currentNode] = disc[neighbor];
				}
			}
		}

	}

	public static void addToBCC(int cNumber, int vertex) {
		BCCS.get(cNumber).add(vertex);
	}

	class Edge {
		int endPointA;
		int endPointB;

		public Edge(int endPointA, int endPointB) {
			this.endPointA = endPointA;
			this.endPointB = endPointB;
		}

		public boolean equals(Object obj) {
			Edge other = (Edge) (obj);
			if (other.endPointA == endPointA && other.endPointB == endPointB) {
				return true;
			} else {
				return false;
			}
		}

	}
}
